# Generated by Django 4.1.7 on 2024-07-04 18:56

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0014_alter_user_email'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 25 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=25, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=25, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=40, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('elo', models.FloatField(default=1000)),
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('groups', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='customuser_set', to='auth.permission')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(editable=False, primary_key=True, serialize=False)),
                ('white_player_elo', models.IntegerField(default=None)),
                ('black_player_elo', models.IntegerField(default=None)),
                ('game_color_winner', models.TextField()),
                ('date_time_played', models.DateTimeField(auto_now_add=True)),
                ('black_player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='black', to='parker_chess_app.customuser')),
                ('game_winner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='wins', to='parker_chess_app.customuser')),
                ('white_player', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='white', to='parker_chess_app.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('profile_name', models.CharField(max_length=25)),
                ('bio', models.TextField(blank=True, max_length=500)),
                ('profile_picture', models.ImageField(blank=True, default='default.jpg', upload_to='profile_pics')),
                ('date_time_played', models.DateTimeField(auto_now_add=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='parker_chess_app.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('urgency', models.IntegerField(default=0)),
                ('read', models.BooleanField(default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='parker_chess_app.customuser')),
            ],
        ),
        migrations.CreateModel(
            name='Move',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('move_id', models.IntegerField()),
                ('move', models.CharField(max_length=6)),
                ('piece', models.CharField(max_length=1)),
                ('fen_string', models.CharField(max_length=90)),
                ('date_time_move_played', models.DateTimeField(auto_now_add=True)),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='parker_chess_app.game')),
                ('mover', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='white_games', to='parker_chess_app.customuser')),
            ],
            options={
                'unique_together': {('game', 'move_id')},
            },
        ),
        migrations.CreateModel(
            name='Following',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_time', models.DateTimeField(auto_now_add=True)),
                ('account_following', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='followee', to='parker_chess_app.customuser')),
                ('main_account', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follower', to='parker_chess_app.customuser')),
            ],
            options={
                'unique_together': {('main_account', 'account_following')},
            },
        ),
    ]
